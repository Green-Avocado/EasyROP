package ui.cliContexts.prompts;

import model.Payload;
import model.RopChain;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import ui.cliContexts.menus.PayloadEditor;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class ExploitObjectMoverTest {
    private ExploitObjectMover exploitObjectMover;
    private PayloadEditor payloadEditor;
    private RopChain ropChain0;
    private RopChain ropChain1;

    @BeforeEach
    void runBefore() {
        payloadEditor = new PayloadEditor(new Payload());
        ropChain0 = new RopChain();
        ropChain1 = new RopChain();

        payloadEditor.getCollection().add(ropChain0, 0);
        payloadEditor.getCollection().add(ropChain1, 1);

        exploitObjectMover = new ExploitObjectMover(payloadEditor);
    }

    @Test
    void testConstructor() {
        assertEquals(payloadEditor, exploitObjectMover.getParentContext());
    }

    @Test
    void testGetContextString() {
        for (int i = 1; i <= 16; i++) {
            assertEquals(
                    "Origin index (default " + i + "): ",
                    exploitObjectMover.getContextString()
            );
            assertEquals(
                    "Destination index (default " + i + "): ",
                    exploitObjectMover.handleInput("").getContextString()
            );

            exploitObjectMover.handleInput("").handleInput("");
            payloadEditor.getCollection().add(new RopChain(), 0);
            exploitObjectMover = new ExploitObjectMover(payloadEditor);
        }
    }

    @Test
    void testHandleInputReadOriginInvalid() {
        // index < 0
        assertEquals(payloadEditor, exploitObjectMover.handleInput("-1"));
        assertEquals(2, payloadEditor.getCollection().getLength());

        // index >= collection.getLength()
        assertEquals(payloadEditor, exploitObjectMover.handleInput("2"));
        assertEquals(2, payloadEditor.getCollection().getLength());
    }

    @Test
    void testHandleInputReadOriginValid() {
        // empty input
        assertEquals(exploitObjectMover, exploitObjectMover.handleInput(""));
        assertEquals(1, payloadEditor.getCollection().getLength());
        assertEquals(ropChain0, payloadEditor.getCollection().get(0));

        payloadEditor.getCollection().add(ropChain1, 1);
        exploitObjectMover = new ExploitObjectMover(payloadEditor);

        // last index
        assertEquals(exploitObjectMover, exploitObjectMover.handleInput("1"));
        assertEquals(1, payloadEditor.getCollection().getLength());
        assertEquals(ropChain0, payloadEditor.getCollection().get(0));

        payloadEditor.getCollection().add(ropChain1, 1);
        exploitObjectMover = new ExploitObjectMover(payloadEditor);

        // first index
        assertEquals(exploitObjectMover, exploitObjectMover.handleInput("0"));
        assertEquals(1, payloadEditor.getCollection().getLength());
        assertEquals(ropChain1, payloadEditor.getCollection().get(0));
    }

    @Test
    void testHandleInputReadDestinationInvalid() {
        // index < 0
        exploitObjectMover.handleInput("");
        assertEquals(payloadEditor, exploitObjectMover.handleInput("-1"));
        assertEquals(2, payloadEditor.getCollection().getLength());

        // index > collection.getLength()
        exploitObjectMover = new ExploitObjectMover(payloadEditor);
        exploitObjectMover.handleInput("");
        assertEquals(payloadEditor, exploitObjectMover.handleInput("2"));
        assertEquals(2, payloadEditor.getCollection().getLength());
    }

    @Test
    void testHandleInputReadDestinationValid() {
        // empty input
        exploitObjectMover.handleInput("");
        assertEquals(payloadEditor, exploitObjectMover.handleInput(""));
        assertEquals(2, payloadEditor.getCollection().getLength());
        assertEquals(ropChain0, payloadEditor.getCollection().get(0));
        assertEquals(ropChain1, payloadEditor.getCollection().get(1));

        exploitObjectMover = new ExploitObjectMover(payloadEditor);

        // last index
        exploitObjectMover.handleInput("");
        assertEquals(payloadEditor, exploitObjectMover.handleInput("1"));
        assertEquals(2, payloadEditor.getCollection().getLength());
        assertEquals(ropChain0, payloadEditor.getCollection().get(0));
        assertEquals(ropChain1, payloadEditor.getCollection().get(1));

        exploitObjectMover = new ExploitObjectMover(payloadEditor);

        // first index
        exploitObjectMover.handleInput("");
        assertEquals(payloadEditor, exploitObjectMover.handleInput("0"));
        assertEquals(2, payloadEditor.getCollection().getLength());
        assertEquals(ropChain1, payloadEditor.getCollection().get(0));
        assertEquals(ropChain0, payloadEditor.getCollection().get(1));
    }
}
