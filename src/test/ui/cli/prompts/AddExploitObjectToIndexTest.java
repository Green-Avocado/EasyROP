package ui.cli.prompts;

import model.Payload;
import model.RopChain;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import ui.cli.menus.PayloadEditor;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class AddExploitObjectToIndexTest {
    private AddExploitObjectToIndex context;
    private PayloadEditor payloadEditor;

    @BeforeEach
    void runBefore() {
        payloadEditor = new PayloadEditor(new Payload());
        context = new AddExploitObjectToIndex(payloadEditor, new RopChain());
    }

    @Test
    void testConstructor() {
        assertEquals(payloadEditor, context.getParentContext());
    }

    @Test
    void testGetContextString() {
        for (int i = 0; i < 16; i++) {
            context = new AddExploitObjectToIndex(payloadEditor, new RopChain());
            assertEquals("Index (default " + i + "): ", context.getContextString());
            payloadEditor.getCollection().add(new RopChain(), 0);
        }
    }

    @Test
    void testHandleInput() {
        // empty input
        for (int i = 0; i < 16; i++) {
            RopChain ropChain = new RopChain();

            context = new AddExploitObjectToIndex(payloadEditor, ropChain);
            assertEquals(payloadEditor, context.handleInput(""));
            assertEquals(ropChain, payloadEditor.getCollection().get(i));
        }

        // valid index
        for (int i = 0; i < 16; i++) {
            RopChain ropChain = new RopChain();

            context = new AddExploitObjectToIndex(payloadEditor, ropChain);
            assertEquals(payloadEditor, context.handleInput(String.valueOf(i * 2)));
            assertEquals(ropChain, payloadEditor.getCollection().get(i * 2));
        }

        // invalid index
        int oldLength = payloadEditor.getCollection().getLength();
        RopChain ropChain = new RopChain();
        context = new AddExploitObjectToIndex(payloadEditor, ropChain);

        assertEquals(payloadEditor, context.handleInput(String.valueOf(payloadEditor.getCollection().getLength() + 1)));
        assertEquals(oldLength, payloadEditor.getCollection().getLength());

        assertEquals(payloadEditor, context.handleInput("-1"));
        assertEquals(oldLength, payloadEditor.getCollection().getLength());
    }
}
