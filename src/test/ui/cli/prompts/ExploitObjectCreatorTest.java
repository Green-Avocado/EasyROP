package ui.cli.prompts;

import model.Payload;
import model.RopChain;
import model.gadgets.AddressGadget;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import ui.cli.ConsoleContext;
import ui.cli.menus.PayloadEditor;
import ui.cli.menus.RopChainEditor;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class ExploitObjectCreatorTest {
    private ExploitObjectCreator exploitObjectCreator;
    private AddressGadget addressGadget;
    private RopChainEditor ropChainEditor;

    @BeforeEach
    void runBefore() {
        addressGadget = new AddressGadget();
        ropChainEditor = new RopChainEditor(new PayloadEditor(new Payload()), new RopChain());
        ArrayList<List<String>> promptData = new ArrayList<>();

        promptData.add(Arrays.asList("prompt0", "response0"));
        promptData.add(Arrays.asList("prompt1", "response1"));
        exploitObjectCreator = new ExploitObjectCreator(ropChainEditor, addressGadget, promptData);
    }

    @Test
    void testConstructor() {
        assertEquals(ropChainEditor, exploitObjectCreator.getParentContext());
    }

    @Test
    void testGetContextString() {
        for (int i = 0; i < 16; i++) {
            ArrayList<List<String>> promptData = new ArrayList<>();
            promptData.add(Arrays.asList("prompt" + i, "response" + i));
            promptData.add(Arrays.asList("otherPrompt", "otherResponse"));

            exploitObjectCreator = new ExploitObjectCreator(ropChainEditor, addressGadget, promptData);
            assertEquals("prompt" + i + " (default response" + i + "): ", exploitObjectCreator.getContextString());
        }
    }

    @Test
    void testGetHandleInputEmptyInput() {
        ConsoleContext context = exploitObjectCreator;
        context = context.handleInput("");

        assertEquals(exploitObjectCreator, context);
        assertEquals("prompt1 (default response1): ", context.getContextString());

        context = context.handleInput("");
        assertEquals(AddExploitObjectToIndex.class, context.getClass());

        context = context.handleInput("");
        assertEquals(ropChainEditor, context);

        assertEquals(addressGadget, ropChainEditor.getCollection().get(0));
        assertEquals("response0", addressGadget.getBase());
        assertEquals("response1", addressGadget.getOffset());
    }

    @Test
    void testGetHandleInputNonEmptyInput() {
        ConsoleContext context = exploitObjectCreator;
        context = context.handleInput("input0");

        assertEquals(exploitObjectCreator, context);
        assertEquals("prompt1 (default response1): ", context.getContextString());

        context = context.handleInput("input1");
        assertEquals(AddExploitObjectToIndex.class, context.getClass());

        context = context.handleInput("");
        assertEquals(ropChainEditor, context);

        assertEquals(addressGadget, ropChainEditor.getCollection().get(0));
        assertEquals("input0", addressGadget.getBase());
        assertEquals("input1", addressGadget.getOffset());
    }
}
