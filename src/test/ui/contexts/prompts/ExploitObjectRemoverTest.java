package ui.contexts.prompts;

import model.Payload;
import model.RopChain;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import ui.contexts.menus.PayloadEditor;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class ExploitObjectRemoverTest {
    PayloadEditor payloadEditor;
    ExploitObjectRemover exploitObjectRemover;

    @BeforeEach
    void runBefore() {
        payloadEditor = new PayloadEditor(new Payload());
        exploitObjectRemover = new ExploitObjectRemover(payloadEditor);
    }

    @Test
    void testConstructor() {
        assertEquals(payloadEditor, exploitObjectRemover.getParentContext());
    }

    @Test
    void testGetContextString() {
        for (int i = 0; i < 16; i++) {
            payloadEditor.getCollection().add(new RopChain(), 0);
            exploitObjectRemover = new ExploitObjectRemover(payloadEditor);

            assertEquals("Index (default " + i + "): ", exploitObjectRemover.getContextString());
        }
    }

    @Test
    void testHandleInputInvalid() {
        RopChain ropChain0 = new RopChain();
        RopChain ropChain1 = new RopChain();

        payloadEditor.getCollection().add(ropChain0, 0);
        payloadEditor.getCollection().add(ropChain1, 1);
        exploitObjectRemover = new ExploitObjectRemover(payloadEditor);

        // index < 0
        assertEquals(payloadEditor, exploitObjectRemover.handleInput("-1"));
        assertEquals(2, payloadEditor.getCollection().getLength());

        // index >= collection.getLength()
        assertEquals(payloadEditor, exploitObjectRemover.handleInput("2"));
        assertEquals(2, payloadEditor.getCollection().getLength());
    }

    @Test
    void testHandleInputValid() {
        RopChain ropChain0 = new RopChain();
        RopChain ropChain1 = new RopChain();

        payloadEditor.getCollection().add(ropChain0, 0);
        payloadEditor.getCollection().add(ropChain1, 1);
        exploitObjectRemover = new ExploitObjectRemover(payloadEditor);

        // empty input
        assertEquals(payloadEditor, exploitObjectRemover.handleInput(""));
        assertEquals(1, payloadEditor.getCollection().getLength());
        assertEquals(ropChain0, payloadEditor.getCollection().get(0));

        payloadEditor.getCollection().add(ropChain1, 1);
        exploitObjectRemover = new ExploitObjectRemover(payloadEditor);

        // last index
        assertEquals(payloadEditor, exploitObjectRemover.handleInput("1"));
        assertEquals(1, payloadEditor.getCollection().getLength());
        assertEquals(ropChain0, payloadEditor.getCollection().get(0));

        payloadEditor.getCollection().add(ropChain1, 1);
        exploitObjectRemover = new ExploitObjectRemover(payloadEditor);

        // first index
        assertEquals(payloadEditor, exploitObjectRemover.handleInput("0"));
        assertEquals(1, payloadEditor.getCollection().getLength());
        assertEquals(ropChain1, payloadEditor.getCollection().get(0));
    }
}
