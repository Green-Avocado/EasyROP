package ui.gui;

import javafx.util.Pair;
import model.ExploitObject;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class NewExploitElementDialog extends JDialog implements ActionListener {
    private final RopChainEditorGui parentFrame;
    private final ExploitObject exploitObject;
    private final JButton okButton = new JButton("Ok");
    private final JButton cancelButton = new JButton("Cancel");
    private final List<JTextField> fieldInputs = new ArrayList<>();

    public NewExploitElementDialog(
            RopChainEditorGui parentFrame,
            ExploitObject exploitObject,
            String title,
            List<Pair<String, String>> fields
    ) {
        super(parentFrame, title);

        this.exploitObject = exploitObject;
        this.parentFrame = parentFrame;

        getContentPane().add(Box.createRigidArea(new Dimension(0, 8)));

        initContentPane();
        initFields(fields);
        initButtons();

        getContentPane().add(Box.createRigidArea(new Dimension(0, 8)));

        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();

        if (source.equals(okButton)) {
            List<String> inputs = new ArrayList<>();

            for (JTextField fieldInput : fieldInputs) {
                inputs.add(fieldInput.getText());
            }

            exploitObject.fromList(inputs);

            parentFrame.getCollection().add(exploitObject, parentFrame.getCollection().getLength());
            parentFrame.insert(exploitObject);
            dispose();
        } else if (source.equals(cancelButton)) {
            dispose();
        }
    }

    private void initContentPane() {
        JPanel content = new JPanel();
        content.setLayout(new BoxLayout(content, BoxLayout.Y_AXIS));
        content.setAlignmentX(Component.CENTER_ALIGNMENT);
        setContentPane(content);
    }

    private void initFields(List<Pair<String, String>> fields) {
        for (Pair<String, String> pair : fields) {
            JPanel fieldPanel = new JPanel();
            fieldPanel.setLayout(new BoxLayout(fieldPanel, BoxLayout.X_AXIS));
            fieldPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
            getContentPane().add(fieldPanel);

            JLabel fieldLabel = new JLabel(pair.getKey() + ": ");
            fieldPanel.add(fieldLabel);

            JTextField fieldInput = new JTextField();
            fieldPanel.add(fieldInput);
            fieldInputs.add(fieldInput);
        }
    }

    private void initButtons() {
        JPanel buttonsPanel = new JPanel();
        buttonsPanel.setLayout(new BoxLayout(buttonsPanel, BoxLayout.X_AXIS));
        buttonsPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
        getContentPane().add(buttonsPanel);

        okButton.addActionListener(this);
        cancelButton.addActionListener(this);

        buttonsPanel.add(Box.createHorizontalGlue());
        buttonsPanel.add(Box.createRigidArea(new Dimension(16, 0)));
        buttonsPanel.add(okButton);
        buttonsPanel.add(Box.createHorizontalGlue());
        buttonsPanel.add(cancelButton);
        buttonsPanel.add(Box.createRigidArea(new Dimension(16, 0)));
        buttonsPanel.add(Box.createHorizontalGlue());
    }
}
