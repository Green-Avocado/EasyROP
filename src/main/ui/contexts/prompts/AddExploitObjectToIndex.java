package ui.contexts.prompts;

import model.ExploitObject;
import ui.contexts.ConsoleContext;
import ui.contexts.menus.CollectionEditor;

// Represents a UI context which gets the index of a new ExploitObject to be added to a collection
public class AddExploitObjectToIndex extends PromptContext {
    private final ExploitObject exploitObject;

    // REQUIRES: exploitObject is a RopChain object for PayloadEditor parentContexts,
    //           or exploitObject is a Gadget or Padding object
    // EFFECTS: Creates a new AddExploitObjectToIndex context with a given parentContext and an exploitObject.
    //          Sets super.defaultResponse to the length of the parentContext.collection.
    public AddExploitObjectToIndex(ConsoleContext parentContext, ExploitObject exploitObject) {
        super(parentContext, "Index", String.valueOf(((CollectionEditor) parentContext).getCollection().getLength()));

        this.exploitObject = exploitObject;
    }

    // MODIFIES: ((CollectionEditor) this.getParentContext()).getCollection()
    // EFFECTS: If the index is valid, inserts the exploitObject into the collection of the parentContext at the index
    @Override
    public ConsoleContext handleInputInternal(String input) {
        for (char c : input.toCharArray()) {
            if (!Character.isDigit(c)) {
                return getParentContext();
            }
        }

        int index = Integer.parseInt(input);

        ((CollectionEditor) getParentContext()).getCollection().add(
                exploitObject,
                index
        );

        return getParentContext();
    }
}
