package ui.contexts.prompts.util;

import model.GadgetCollection;
import model.gadgets.ExploitObject;
import ui.contexts.ConsoleContext;
import ui.contexts.menus.CollectionEditor;
import ui.contexts.prompts.PromptContext;

// Represents a UI context that moves an ExploitObject to a different index in the same collection
public class ExploitObjectMover extends PromptContext {
    private ExploitObject exploitObject;

    // EFFECTS: Creates a new ExploitObjectMover context with the given parentContext.
    //          Sets the defaultResponse to the index of the last item in parentContext.collection.
    public ExploitObjectMover(ConsoleContext parentContext) {
        super(
                parentContext,
                "Origin index",
                String.valueOf(((CollectionEditor) parentContext).getCollection().getLength() - 1)
        );
    }

    // EFFECTS: Creates a new ExploitObjectMover context with the given parentContext and exploitObject.
    //          Sets the defaultResponse to the length of parentContext.collection.
    public ExploitObjectMover(ConsoleContext parentContext, ExploitObject exploitObject) {
        super(
                parentContext,
                "Destination index",
                String.valueOf(((CollectionEditor) parentContext).getCollection().getLength())
        );

        this.exploitObject = exploitObject;
    }

    // REQUIRES: input can be parsed as an integer
    // EFFECTS:
    // MODIFIES: ((CollectionEditor) this.getParentContext()).getCollection()
    public ConsoleContext handleInputInternal(String input) {
        int index = Integer.parseInt(input);
        GadgetCollection collection = ((CollectionEditor) getParentContext()).getCollection();

        if (exploitObject == null) {
            return readOrigin(collection, index);
        } else {
            return readDestination(collection, index);
        }
    }

    // EFFECTS: Attempts to store the exploitObject at the specified index and remove it from the collection.
    //          Returns the next context if successful, otherwise returns the parentContext.
    // MODIFIES: ((CollectionEditor) this.getParentContext()).getCollection()
    private ConsoleContext readOrigin(GadgetCollection collection, int index) {
        if (index >= 0) {
            exploitObject = collection.get(index);

            if (exploitObject != null && collection.remove(index)) {
                return new ExploitObjectMover(getParentContext(), exploitObject);
            }
        }

        return getParentContext();
    }

    // EFFECTS:
    // MODIFIES: ((CollectionEditor) this.getParentContext()).getCollection()
    private ConsoleContext readDestination(GadgetCollection collection, int index) {
        if (index < 0 || !collection.add(exploitObject, index)) {
            collection.add(exploitObject, collection.getLength());
        }

        return getParentContext();
    }
}
