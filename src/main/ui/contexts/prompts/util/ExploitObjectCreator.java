package ui.contexts.prompts.util;

import model.gadgets.ExploitObject;
import ui.contexts.ConsoleContext;
import ui.contexts.prompts.PromptContext;

import java.util.ArrayList;
import java.util.List;

// Represents a UI context that creates an ExploitObject from a list of prompt responses
// and adds it to a GadgetCollection
public class ExploitObjectCreator extends PromptContext {
    private final ExploitObject exploitObject;
    private final ArrayList<List<String>> promptData;
    private final ArrayList<String> responseData;

    // MODIFIES: promptData
    // EFFECTS: Creates a new ExploitObjectCreator with the given parentContext, exploitObject, and promptData.
    //          Sets responseData to a new ArrayList. The prompt string and default response is set as
    //          the first pair in promptData. Removes the first pair from promptData.
    public ExploitObjectCreator(
            ConsoleContext parentContext,
            ExploitObject exploitObject,
            ArrayList<List<String>> promptData
    ) {
        this(parentContext, exploitObject, promptData, new ArrayList<>());
    }

    // MODIFIES: promptData
    // EFFECTS: Creates a new ExploitObjectCreator with the given parentContext, exploitObject,
    //          promptData, and responseData. The prompt string and default response is set as the first pair
    //          in promptData. Removes the first pair from promptData.
    public ExploitObjectCreator(
            ConsoleContext parentContext,
            ExploitObject exploitObject,
            ArrayList<List<String>> promptData,
            ArrayList<String> responseData
    ) {
        super(parentContext, promptData.get(0).get(0), promptData.get(0).get(1));

        this.promptData = promptData;
        this.exploitObject = exploitObject;
        this.responseData = responseData;

        promptData.remove(0);
    }

    // MODIFIES: this, exploitObject
    // EFFECTS: Adds the input to responseData.
    //          If there are still elements in promptData, returns a new ExploitObjectCreator with the same fields.
    //          Otherwise, sets the fields of exploitObject using responseData and returns a new
    //          AddExploitObjectToIndex context with the same parentContext and the exploitObject.
    public ConsoleContext handleInputInternal(String input) {
        responseData.add(input);

        if (promptData.size() > 0) {
            return new ExploitObjectCreator(getParentContext(), exploitObject, promptData, responseData);
        } else {
            exploitObject.fromList(responseData);
            return new AddExploitObjectToIndex(getParentContext(), exploitObject);
        }
    }
}
