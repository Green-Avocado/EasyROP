package ui.contexts.prompts.util;

import model.gadgets.ExploitObject;
import ui.contexts.ConsoleContext;
import ui.contexts.menus.CollectionEditor;
import ui.contexts.prompts.PromptContext;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ExploitObjectCreator extends PromptContext {
    private final ExploitObject exploitObject;
    private final ArrayList<List<String>> promptData;
    private final ArrayList<String> responseData;

    public ExploitObjectCreator(
            ConsoleContext parentContext,
            ExploitObject exploitObject,
            ArrayList<List<String>> promptData
    ) {
        this(parentContext, exploitObject, promptData, new ArrayList<>());

        promptData.add(Arrays.asList(
                "Index",
                String.valueOf(((CollectionEditor) parentContext).getCollection().getLength()))
        );
    }

    public ExploitObjectCreator(
            ConsoleContext parentContext,
            ExploitObject exploitObject,
            ArrayList<List<String>> promptData,
            ArrayList<String> responseData
    ) {
        super(parentContext, promptData.get(0).get(0), promptData.get(0).get(1));

        this.promptData = promptData;
        this.exploitObject = exploitObject;
        this.responseData = responseData;
    }

    public ConsoleContext handleInputInternal(String input) {
        if (promptData.size() > 1) {
            promptData.remove(0);
            responseData.add(input);
            return new ExploitObjectCreator(getParentContext(), exploitObject, promptData, responseData);
        } else {
            int index = Integer.parseInt(input);

            if (index >= 0) {
                exploitObject.fromList(responseData);

                ((CollectionEditor) getParentContext()).getCollection().add(
                        exploitObject,
                        index
                );
            }

            return getParentContext();
        }
    }
}
