package ui;

import model.ExploitObject;
import model.GadgetCollection;

public class MoveExploitObjectContext extends PromptContext {
    private ExploitObject exploitObject;

    public MoveExploitObjectContext(ConsoleContext parentContext) {
        super(
                parentContext,
                "Origin index",
                String.valueOf(((CollectionEditor) parentContext).getCollection().getLength() - 1)
        );
    }

    public MoveExploitObjectContext(ConsoleContext parentContext, ExploitObject exploitObject) {
        super(
                parentContext,
                "Destination index",
                String.valueOf(((CollectionEditor) parentContext).getCollection().getLength())
        );

        this.exploitObject = exploitObject;
    }

    ConsoleContext handleInputInternal(String input) {
        int index = Integer.parseInt(input);
        GadgetCollection collection = ((CollectionEditor) getParentContext()).getCollection();

        if (exploitObject == null) {
            return readOrigin(collection, index);
        } else {
            return readDestination(collection, index);
        }
    }

    ConsoleContext readOrigin(GadgetCollection collection, int index) {
        if (index >= 0 && collection.remove(index)) {
            exploitObject = collection.get(index);
            return new MoveExploitObjectContext(getParentContext(), exploitObject);
        } else {
            return getParentContext();
        }
    }

    ConsoleContext readDestination(GadgetCollection collection, int index) {
        if (index < 0 || !collection.add(exploitObject, index)) {
            collection.add(exploitObject, collection.getLength());
        }

        return getParentContext();
    }
}
